module Main where

import DA.Action
import DA.Date
import DA.Exception
import DA.Set (Set)


data Currency = EUR | USD | GBP
    deriving (Show, Eq)

data Price = Price
    with
      amount   : Decimal
      currency : Currency
    deriving (Show, Eq)

template CarRepairAgreement
    with 
        customer    : Party
        provider    : Party
        description : Text 
        price       : Price
        paymentDue  : Date
        createdAt   : Time
        observers   : Set Party
    where
        signatory provider, customer
        observer observers

        ensure price.amount > 0.0

template CarRepairProposal
    with
        customer    : Party
        provider    : Party
        description : Text
        price       : Price
    where 
        signatory customer
        observer provider

        -- provider can and make an offer, which archives proposal and creates CarRepairOffer contract
        choice MakeAnOffer : ContractId CarRepairOffer
            with
                paymentDue     : Date
                newDescription : Text
                newPrice       : Price
                observers      : Set Party
            controller provider
            do
              create CarRepairOffer with description = newDescription, price = newPrice, ..
           
        -- provider can accept the proposal, which archives proposal and creates CarRepairAgreement contract
        choice Approve : ContractId CarRepairAgreement
            with
                paymentDue : Date
                observers  : Set Party
            controller provider
            do
              try do
                createdAt <- getTime
                let today = toDateUTC createdAt 
                when (today > paymentDue) $
                  throw PaymentDueError with
                    paymentDue
                    today
                create CarRepairAgreement with ..
              catch
                PreconditionFailed _ -> assertFail "Price should be greater than 0.0"

        -- customer can cancel proposal, which archives it
        choice Cancel : ()
            controller customer
            do return ()
        
        -- provider can reject proposal, which archives it
        choice Reject : ()
            controller provider
            do return ()

template CarRepairOffer
    with
        customer    : Party
        provider    : Party
        description : Text
        price       : Price
        paymentDue  : Date
        observers   : Set Party
    where 
        signatory provider
        observer customer, observers
        
        -- customer can make proposal, which archives offer and creates CarRepairProposal contract
        choice Propose : ContractId CarRepairProposal
            with
                newDescription : Text
                newPrice       : Price
            controller customer
            do
              create CarRepairProposal with description = newDescription, price = newPrice, ..
        
        -- customer can accept offer, which archives offer and creates agreement
        choice Accept : ContractId CarRepairAgreement
            controller customer
            do
             try do
                createdAt <- getTime
                let today = toDateUTC createdAt 
                when (today > paymentDue) $
                  throw PaymentDueError with
                    paymentDue
                    today
                create CarRepairAgreement with ..
              catch
                PreconditionFailed _ -> assertFail "Price should be greater than 0.0"
        
        -- customer can decline offer, which archives it
        choice Decline : ()
            controller customer
            do return ()
        
        -- provider can withdraw offer, which archives it
        choice Withdraw : ()
            controller provider
            do return ()


exception PaymentDueError
    with
        today      : Date
        paymentDue : Date
    where
        message "Payment date " <> show paymentDue <> " cannot be in the past " <> show today
